<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="AppSettingsProvider.Tests.fs" />
    <Compile Include="ResXProvider.Tests.fs" />
    <Compile Include="YamlProvider.Tests.fs" />
    <Compile Include="IniFileProvider.Tests.fs" />
    <Compile Include="Program.fs" />
    <Content Include="paket.references" />
    <None Include="*.yaml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="*.ini">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="../../src/FSharp.Configuration/FSharp.Configuration.fsproj" />
    <!-- <Reference Include="Expecto">
      <HintPath>..\..\packages\test\Expecto\lib\netstandard1.6\Expecto.dll</HintPath>
    </Reference>
    <Reference Include="Argu">
      <HintPath>..\..\packages\test\Argu\lib\netstandard1.6\Argu.dll</HintPath>
    </Reference> -->
    <!-- These files are the facades necessary to run .NET Standard 2.0 components on .NET Framweork 4.6.1 (.NET Framework 4.7 will -->
    <!-- come with these facades included). Because the type provider is a .NET Standard 2.0 component, the deployment of the type -->
    <!--  provider must include these facade DLLs if it is to run hosted inside an F# compiler executing using  .NET Framework 4.6.1 or Mono 5.0. -->
    <!-- -->
    <!-- We are not yet sure if the presence of these files will prevent an otherwise .NET Standard 2.0 type provider running inside a -->
    <!-- F# compiler executing using .NET CoreApp 2.0, as until recently F# compilers running using .NET CoreApp 2.0 do not load type providers correctly. -->
  </ItemGroup>
  <Import Project="..\..\.paket\Paket.Restore.targets" />
</Project>